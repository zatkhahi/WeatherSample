using Application.Authorization;
using Common.Presentation.Controllers.Auth.Models;
using Common.Presentation.Models;
using Domain.Entities;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;

namespace Common.Presentation.Controllers.Auth
{
    [Route("api/[controller]")] // api/authmanagement
    [ApiController]
    public class AuthManagementController : ControllerBase
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly JwtConfig _jwtConfig;

        public AuthManagementController(UserManager<ApplicationUser> userManager, IOptionsMonitor<JwtConfig> optionsMonitor)
        {
            _userManager = userManager;
            _jwtConfig = optionsMonitor.CurrentValue;
        }


        private string GenerateJwtToken(ApplicationUser user, IList<string> roles, DateTime expireDate)
        {
            // Now its ime to define the jwt token which will be responsible of creating our tokens
            var jwtTokenHandler = new JwtSecurityTokenHandler();

            // We get our secret from the appsettings
            var key = Encoding.ASCII.GetBytes(_jwtConfig.Secret);

            // we define our token descriptor
            // We need to utilise claims which are properties in our token which gives information about the token
            // which belong to the specific user who it belongs to
            // so it could contain their id, name, email the good part is that these information
            // are generated by our server and identity framework which is valid and trusted
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                new Claim("Id", user.Id.ToString()),
                new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString()),
                new Claim(JwtRegisteredClaimNames.UniqueName, user.UserName),
                new Claim(JwtRegisteredClaimNames.Email, user.Email),
                // the JTI is used for our refresh token which we will be convering in the next video
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            }),
                // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
                // but since this is a demo app we can extend it to fit our current need
                Expires = expireDate,
                //Expires = rememberMe ? DateTime.UtcNow.AddDays(90) : DateTime.UtcNow.AddMinutes(1),
                // here we are adding the encryption alogorithim information which will be used to decrypt our token
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature),
            };
            if (roles != null)
                foreach (var role in roles)
                    tokenDescriptor.Subject.AddClaim(new Claim(ClaimTypes.Role, role));

            var token = jwtTokenHandler.CreateToken(tokenDescriptor);

            var jwtToken = jwtTokenHandler.WriteToken(token);

            return jwtToken;
        }


        [HttpPost]
        [Route("Login")]
        public async Task<IActionResult> Login([FromBody] UserLoginRequest user)
        {
            if (user == null)
                return BadRequest(new RegistrationResponse()
                {
                    Result = false,
                    Errors = new List<string>(){
                                        "Invalid model sent"
                                    }
                });
            if (string.IsNullOrEmpty(user.Username) || string.IsNullOrEmpty(user.Password))
                return BadRequest(new RegistrationResponse()
                {
                    Result = false,
                    Errors = new List<string>(){
                                        "نام کاربری یا رمز عبور نمی تواند خالی باشد"
                                    }
                });

            if (ModelState.IsValid)
            {
                // check if the user with the same email exist
                var existingUser = await _userManager.FindByNameAsync(user.Username);

                if (existingUser == null || existingUser.IsDeleted)
                {
                    // We dont want to give to much information on why the request has failed for security reasons
                    return BadRequest(new RegistrationResponse()
                    {
                        Result = false,
                        Errors = new List<string>(){
                                        "نام کاربری و رمز عبور صحیح نمی باشد"
                                    }
                    });
                }

                // Now we need to check if the user has inputed the right password
                var isCorrect = await _userManager.CheckPasswordAsync(existingUser, user.Password);

                if (isCorrect)
                {
                    var roles = await _userManager.GetRolesAsync(existingUser);
                    var jwtToken = GenerateJwtToken(existingUser, roles, user.RememberMe ? DateTime.UtcNow.AddDays(90) : DateTime.UtcNow.AddHours(24));

                    return Ok(new RegistrationResponse()
                    {
                        Result = true,
                        Token = jwtToken,
                        FullName = existingUser.FullName
                    });
                }
                else
                {
                    // We dont want to give to much information on why the request has failed for security reasons
                    return BadRequest(new RegistrationResponse()
                    {
                        Result = false,
                        Errors = new List<string>(){
                                         "نام کاربری و رمز عبور صحیح نمی باشد"
                                    }
                    });
                }
            }

            return BadRequest(new RegistrationResponse()
            {
                Result = false,
                Errors = new List<string>(){
                                        "Invalid model sent"
                                    }
            });
        }

        [HttpPost]
        [Route("ExtendToken")]
        [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
        public async Task<IActionResult> ExtendToken([FromServices] IPrincipal principal)
        {
            try
            {
                var userId = principal.GetUserId();
                if (userId == 0)
                    throw new Exception("شماره کاربری در توکن ارسالی اشتباه است");

                var existingUser = await _userManager.FindByIdAsync(userId.ToString());
                if (existingUser == null || existingUser.IsDeleted)
                {
                    return BadRequest(new RegistrationResponse()
                    {
                        Result = false,
                        Errors = new List<string>(){
                                        "نام کاربری و رمز عبور صحیح نمی باشد"
                                    }
                    });
                }

                var roles = await _userManager.GetRolesAsync(existingUser);
                var jwtToken = GenerateJwtToken(existingUser, roles,  DateTime.UtcNow.AddDays(90));

                return Ok(new RegistrationResponse()
                {
                    Result = true,
                    Token = jwtToken,
                    FullName = existingUser.FullName
                });
            }
            catch (Exception ex)
            {
                return BadRequest(new RegistrationResponse()
                {
                    Result = false,
                    Errors = new List<string>(){
                                        ex.Message
                                    }
                });
            }

        }

        [HttpPost]
        [Route("InfiniteToken")]
        [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme, Roles = "TaradodDevice")]
        public async Task<IActionResult> InfiniteToken([FromServices] IPrincipal principal)
        {
            try
            {
                var userId = principal.GetUserId();
                if (userId == 0)
                    throw new Exception("شماره کاربری در توکن ارسالی اشتباه است");

                var existingUser = await _userManager.FindByIdAsync(userId.ToString());
                if (existingUser == null || existingUser.IsDeleted)
                {
                    return BadRequest(new RegistrationResponse()
                    {
                        Result = false,
                        Errors = new List<string>(){
                                        "نام کاربری و رمز عبور صحیح نمی باشد"
                                    }
                    });
                }

                var roles = await _userManager.GetRolesAsync(existingUser);
                var jwtToken = GenerateJwtToken(existingUser, roles, DateTime.MaxValue);

                return Ok(new RegistrationResponse()
                {
                    Result = true,
                    Token = jwtToken,
                    FullName = existingUser.FullName
                });
            }
            catch (Exception ex)
            {
                return BadRequest(new RegistrationResponse()
                {
                    Result = false,
                    Errors = new List<string>(){
                                        ex.Message
                                    }
                });
            }

        }
    }
}
